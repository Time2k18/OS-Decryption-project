#include <iostream>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <regex>
#include <algorithm>

using namespace std;
int counter = 3;
int error = 0;
string sentinal = "end";
string line;
string decipherSubstitue = "";
string decipherHill = "";
string decipherSummit = "";

//function to remove all but one space
string removeSpaces(string current)
{
    string newString = "";
    string temp = "";

    for (char c : current)
    {
        temp.push_back(c);
        if (temp.back() == ' ' && c != ' ')
        {
            newString.push_back(' ');
        }
        if (c != ' ')
        {
            newString.push_back(c);
        }
    }
    return newString;
}

//substitute thread function
void *substitute(void *subI)
{
    decipherSubstitue.clear();
    string sub = (char *)subI;
    int letter;
    int N;
    int num = 0;
    string section2;
    for (int i = 0; isalpha(section2[i]); i++)
    {
        if (isalpha(section2[i]))
        {
            letter = tolower(sub[0]) - 97;
            N = (letter % 10) + 2;
        }
        else
        {
            cout << "Error: Substitute section 1 first letter is a non-alphabetical character" << endl;
            cout << endl;
            error++;
        }
    }

    for (int i = 0; i < sub.size(); i++)
    {
        if (sub[i] == ' ' && isalpha(sub[i + 1]))
        {
            section2 = sub.substr(i + 1, sub.size());
        }
    }
    for (int i = 0; i < section2.size(); i++)
    {
        if (!isalpha(section2[i]))
        {
            cout << "Error: Substitute section 2 has a non-alphabetical character" << endl;
            cout << endl;
            error++;
        }
        else
        {
            char c = section2[i] - 4;
            decipherSubstitue.push_back(c);
        }
    }

    return NULL;
}

//hill thread function
void *hill(void *hillI)
{
    decipherHill.clear();
    int size = 2;
    string hill = (char *)hillI;
    int S[size][size];
    int CPrime[2][1];
    string section1;
    string section2Str;
    vector<int> section2;

    for (int i = 0; i < hill.size(); i++)
    {
        if (!isalpha(hill[i]) && !isalpha(hill[i + 1]) && section1.size() == 0 && section1[i] != ' ')
        {
            section1 = hill.substr(0, i);
            section2Str = hill.substr(i, hill.size());
        }
    }
    section1.erase(remove(section1.begin(), section1.end(), ' '), section1.end());
    //check section 2 if non-digits
    for (int i = 0; i < section2.size(); i++)
    {
        if (!isdigit(section2Str[i]) && section2Str[i] != ' ')
        {
            cout << "ERROR: Hill section 2 has incorrect amount of numbers" << endl;
            cout << endl;
            error++;
        }
    }
    int num;
    stringstream iss(section2Str);
    while (iss >> num)
    {
        section2.push_back(num);
    }

    //check for hill letter amount
    if ((section1.size() % 2) != 0)
    {
        cout << "ERROR: Hill section 1 has incorrect number of letters" << endl;
        cout << endl;
        error++;
    }
    //check if section 1 are non-alpha
    for (int i = 0; i < section1.size(); i++)
    {
        if (!isalpha(section1[i]))
        {
            cout << "ERROR: Hill section 1 has a non-alphabetic character" << endl;
            cout << endl;
            error++;
        }
    }
    //check for hill letter amount
    if (section2.size() != 4)
    {
        cout << "ERROR: Hill section 2 has incorrect amount of numbers" << endl;
        cout << endl;
        error++;
    }

    //split letter into duos and process them
    for (int i = 0; i < section1.size(); i++)
    {
        if ((i % 2) == 0)
        {
            int letter1 = ((int)tolower(section1[i])) - 'a';
            int letter2 = ((int)tolower(section1[i + 1])) - 'a';
            int C[2][1] = {{letter1}, {letter2}};

            //decode section1 and section2 of hill input
            for (int j = 0; j < section2.size(); j++)
            {
                if (j == 0 || j == 1)
                {
                    S[0][j] = section2[j];
                }
                else if (j == 2)
                {
                    S[1][0] = section2[j];
                }
                else
                {
                    S[1][1] = section2[j];
                }
            }
            //multiply matrix calculator
            CPrime[0][0] = ((S[0][0] * C[0][0]) + (S[0][1] * C[1][0]));
            CPrime[1][0] = ((S[1][0] * C[0][0]) + (S[1][1] * C[1][0]));
            //fill decipher with the decoded letters
            decipherHill.push_back(toupper((char)(CPrime[0][0] % 26) + 97));
            decipherHill.push_back(toupper((char)(CPrime[0][1] % 26) + 97));
        }
    }

    return NULL;
}

//summt thread function
void *summit(void *summitI)
{
    decipherSummit.clear();
    string summit = (char *)summitI;
    int size = 3;
    int S[size][size];
    int CPrime[size][1];
    string section1;
    string section2Str;
    vector<int> section2;

    for (int i = 0; i < summit.size(); i++)
    {
        if (!isalpha(summit[i]) && !isalpha(summit[i + 1]) && section1.size() == 0)
        {
            section1 = summit.substr(0, i);
            section2Str = summit.substr(i, summit.size());
        }
    }
    section1.erase(remove(section1.begin(), section1.end(), ' '), section1.end());

    //check section 2 if non-digits
    for (int i = 0; i < section2Str.size(); i++)
    {
        if (!isdigit(section2Str[i]) && section2Str[i] != ' ')
        {
            cout << "ERROR: Summit section 2 has a non-digit" << endl;
            cout << endl;
            error++;
        }
    }
    int num;
    stringstream iss(section2Str);
    while (iss >> num)
    {
        section2.push_back(num);
    }
    //check for hill letter amount
    if ((section1.size() % 3) != 0)
    {
        cout << "ERROR: Summit section 1 has incorrect number of letters" << endl;
        cout << endl;
        error++;
    }
    //check if section 1 are non-alpha
    for (int i = 0; i < section1.size(); i++)
    {
        if (!isalpha(section1[i]))
        {
            cout << "ERROR: Summit section 1 has a non-alphabetic character" << endl;
            cout << endl;
            error++;
        }
    }
    //check for hill letter amount
    if (section2.size() != 9)
    {
        cout << "ERROR: Summit section 2 not enough numbers" << endl;
        cout << endl;
        error++;
    }

    //split letter into duos and process them
    for (int i = 0; i < section1.size(); i++)
    {
        if ((i % 3) == 0)
        {
            int letter1 = ((int)tolower(section1[i])) - 'a';
            int letter2 = ((int)tolower(section1[i + 1])) - 'a';
            int letter3 = ((int)tolower(section1[i + 2])) - 'a';
            int C[size][1] = {{letter1}, {letter2}, {letter3}};

            //decode section1 and section2 of hill input
            S[0][0] = section2[0];
            S[0][1] = section2[1];
            S[0][2] = section2[2];
            S[1][0] = section2[3];
            S[1][1] = section2[4];
            S[1][2] = section2[5];
            S[2][0] = section2[6];
            S[2][1] = section2[7];
            S[2][2] = section2[8];

            //multiply matrix calculator
            CPrime[0][0] = ((S[0][0] * C[0][0]) + (S[0][1] * C[1][0]) + (S[0][2] * C[2][0]));
            CPrime[1][0] = ((S[1][0] * C[0][0]) + (S[1][1] * C[1][0]) + (S[1][2] * C[2][0]));
            CPrime[2][0] = ((S[2][0] * C[0][0]) + (S[2][1] * C[1][0]) + (S[2][2] * C[2][0]));
            //fill decipher with decoded letters
            decipherSummit.push_back(toupper((char)(CPrime[0][0] % 26) + 97));
            decipherSummit.push_back(toupper((char)(CPrime[0][1] % 26) + 97));
            decipherSummit.push_back(toupper((char)(CPrime[0][2] % 26) + 97));
        }
    }

    return NULL;
}

//decode thread function
void *decoder(void *message)
{
    pthread_t thread_id;
    string input = (char *)message;
    vector<string> words;
    removeSpaces(input);
    string subI;
    string hillI;
    string summitI;

    // matches regex and splits for each string
    regex e("([*]|[^*]+)");

    regex_iterator<string::iterator> rit(input.begin(), input.end(), e);
    regex_iterator<string::iterator> rend;
    int i = 0;
    words.push_back(" ");
    while (rit != rend)
    {
        words.push_back(rit->str());
        ++rit;
    }
    //sort vector of split strings
    for (int i = 0; i < words.size(); i++)
    {
        if (words.size() > 1)
        {
            if (words[i] == "*" && words[i - 1] != "*" && words[i + 1] != "*")
            {
                subI = words[i + 1];
            }
            else if (words[i] == "*" && words[i - 1] != "*" && words[i + 1] == "*" && words[i + 2] != "*")
            {
                hillI = words[i + 2];
            }

            else if (words[i] == "*" && words[i - 1] != "*" && words[i + 1] == "*" && words[i + 2] == "*" && words[i - 1] != "*")
            {
                summitI = words[i + 3];
            }
        }
    }
    char *sub = const_cast<char *>(subI.c_str());
    char *H = const_cast<char *>(hillI.c_str());
    char *sum = const_cast<char *>(summitI.c_str());

    //substitute thread
    int result0 = pthread_create(&thread_id, NULL, substitute, (void *)sub);
    result0 = pthread_join(thread_id, NULL);
    //hill thread
    int result1 = pthread_create(&thread_id, NULL, hill, (void *)H);
    result1 = pthread_join(thread_id, NULL);
    //summit thread
    int result2 = pthread_create(&thread_id, NULL, summit, (void *)sum);
    result2 = pthread_join(thread_id, NULL);

    if (result0 != 0 || result1 != 0 || result2 != 0)
    {
        cout << "ERROR: one or more of your inputs were incorrect(one or more sections were incorrect)" << endl;
        cout << endl;
    }
    return NULL;
}

//sifter thread function
void *sifter(void *message)
{
    pthread_t thread_id;
    int result0;
    string input;
    do
    {
        cout << "Enter string to decifer(end to stop)" << endl;

        getline(cin, line);

        //check for 3 key '*' points
        int s = 0;
        int h = 0;
        int u = 0;

        for (int i = 0; i < line.length(); i++)
        {
            if (line[i - 1] != '*' && line[i] == '*' && line[i + 1] != '*' && s == 0)
            {
                s++;
            }
            if (line[i - 1] != '*' && line[i] == '*' && line[i + 1] == '*' && line[i + 2] != '*' && h == 0)
            {
                h++;
            }
            if (line[i] - 1 != '*' && line[i] == '*' && line[i + 1] == '*' && line[i + 2] == '*' && line[i + 3] != '*' && u == 0)
            {
                u++;
            }
        }
        int sum = (s + h + u);
        char *inputI = const_cast<char *>(line.c_str());

        //decoder thread
        if (sum == 3)
        {
            result0 = pthread_create(&thread_id, NULL, decoder, (void *)inputI);

            if (result0 != 0)
            {
                cout << "ERROR: one or more of your inputs were incorrect(sifter could not finish)" << endl;
                cout << endl;
                counter--;
            }
            else
            {
                result0 = pthread_join(thread_id, NULL);
                return NULL;
            }
        }
        else if (line != sentinal)
        {

            if (sum > 3)
            {
                cout << "ERROR: one or more of your inputs were incorrect(to many key points)" << endl;
                cout << endl;
                error++;
            }
            else
            {
                cout << "ERROR: one or more of your inputs were incorrect(wrong key points or sections missing" << endl;
                cout << endl;
                error++;
            }
        }
    } while (line != sentinal);

    cout << "sentinal has been entered" << endl;
    //myfile.close();
    return NULL;
}

int main(int argc, char *argv[])
{
    pthread_t thread_id;
    //sifter thread
    do
    {
        int result0 = pthread_create(&thread_id, NULL, sifter, (void *)argv);
        result0 = pthread_join(thread_id, NULL);

        if (result0 != 0)
        {
            cout << "ERROR: sifter could not finish or to many wrong inputs" << endl;
            cout << endl;
            exit(1);
        }
        else if (error == 0)
        {
            for (int i = 0; i < decipherSubstitue.size(); i++)
            {
                cout << decipherSubstitue[i];
            }
            cout << " ";
            for (int i = 0; i < decipherHill.size(); i++)
            {
                cout << decipherHill[i];
            }
            cout << " ";
            for (int i = 0; i < decipherSummit.size(); i++)
            {
                cout << decipherSummit[i];
            }
            decipherSubstitue.clear();
            decipherHill.clear();
            decipherSummit.clear();
        }
        else
        {
            counter--;
            if (counter <= 0)
            {
                cout << "To many incorrect inputs" << endl;
                exit(1);
            }
        }
        cout << " Number of chances: " << counter << endl;
        cout << endl;

        error = 0;

    } while (line != sentinal);
    return 0;
}
